# =============================================================================
# CONFIGURACIÓN DE PRODUCCIÓN - REBATES MANAGEMENT API
# =============================================================================
# ⚠️  IMPORTANTE: Este archivo contiene configuraciones de producción
#     NO lo subas a control de versiones
#     Copia este archivo como .env y ajusta los valores según tu entorno
# =============================================================================

# Configuración de la aplicación FastAPI
APP_NAME=Rebates Management API
APP_VERSION=1.0.0
DEBUG=false
API_PREFIX=/api/v1
ENVIRONMENT=production
LOG_LEVEL=info

# =============================================================================
# CONFIGURACIÓN DE BASE DE DATOS
# =============================================================================

# Configuración de PostgreSQL
POSTGRES_USER=rebate_user
POSTGRES_PASSWORD=TuContraseñaSegura123!
POSTGRES_DB=rebate_management_prod
POSTGRES_HOST=tu-servidor-postgres.com
POSTGRES_PORT=5432

# Configuración SSL para PostgreSQL (OBLIGATORIO en producción)
POSTGRES_SSL_MODE=require
POSTGRES_SSL_CERT=/etc/ssl/certs/client-cert.pem
POSTGRES_SSL_KEY=/etc/ssl/private/client-key.pem
POSTGRES_SSL_ROOT_CERT=/etc/ssl/certs/ca-cert.pem

# Configuración del pool de conexiones (optimizado para producción Azure PostgreSQL)
# Número de conexiones permanentes en el pool
POSTGRES_POOL_SIZE=30
# Número máximo de conexiones adicionales cuando el pool está lleno
POSTGRES_MAX_OVERFLOW=60
# Tiempo máximo para obtener una conexión del pool (segundos)
POSTGRES_POOL_TIMEOUT=30
# Tiempo después del cual se recicla una conexión (segundos)
POSTGRES_POOL_RECYCLE=1200

# Configuración de timeouts de conexión (optimizado para producción Azure)
# Tiempo máximo para establecer conexión inicial (segundos)
POSTGRES_CONNECT_TIMEOUT=20
# Tiempo máximo para ejecutar comandos async (segundos)
POSTGRES_COMMAND_TIMEOUT=180
# Tiempo máximo para ejecutar queries SQL (milisegundos)
POSTGRES_STATEMENT_TIMEOUT=180000

# Configuración adicional de la base de datos
SQL_ECHO=false

# =============================================================================
# CONFIGURACIÓN DE SEGURIDAD
# =============================================================================

# Configuración CORS (SOLO dominios autorizados)
CORS_ORIGINS=https://tu-dominio-prod.com,https://www.tu-dominio-prod.com,https://app.tu-dominio-prod.com
CORS_ALLOW_CREDENTIALS=false


# =============================================================================
# CONFIGURACIÓN DE ENTORNO
# =============================================================================

# Configuración de Python
PYTHONPATH=/app

# =============================================================================
# CONFIGURACIONES ADICIONALES DE PRODUCCIÓN
# =============================================================================


# =============================================================================
# NOTAS DE SEGURIDAD Y CONFIGURACIÓN
# =============================================================================

# SEGURIDAD CRÍTICA:
# 1. CAMBIA POSTGRES_PASSWORD por una contraseña segura y única
# 2. Ajusta POSTGRES_HOST a tu servidor de producción
# 3. Configura certificados SSL válidos para la base de datos
# 4. Ajusta CORS_ORIGINS solo a dominios autorizados
# 5. Revisa y ajusta los límites de rate limiting según tu carga
# 6. Monitorea los logs regularmente
# 7. Configura alertas para errores críticos
# 8. Realiza backups regulares de la base de datos
# 9. Mantén actualizadas todas las dependencias
# 10. Usa HTTPS en todos los endpoints públicos
# 11. Configura Redis para rate limiting avanzado
# 12. Ajusta los límites de rate limiting por tipo de operación
# 13. Configura monitoreo y métricas
# 14. Implementa alertas automáticas para rate limiting
# 15. Configura IP whitelist/blacklist si es necesario
# 16. Verifica que todas las variables estén configuradas antes de desplegar
# 17. Copia este archivo como .env antes de usar

# OPTIMIZACIÓN DE BASE DE DATOS PARA PRODUCCIÓN AZURE:
# 18. POSTGRES_POOL_SIZE=30: Pool optimizado para Azure PostgreSQL
# 19. POSTGRES_MAX_OVERFLOW=60: Permite picos de tráfico con overhead controlado
# 20. POSTGRES_POOL_TIMEOUT=30: Tiempo razonable para obtener conexión
# 21. POSTGRES_POOL_RECYCLE=1200: Recicla conexiones cada 20 minutos (optimizado)
# 22. POSTGRES_CONNECT_TIMEOUT=20: Tiempo suficiente para conexión inicial en Azure
# 23. POSTGRES_COMMAND_TIMEOUT=180: Tiempo para operaciones complejas (3 minutos)
# 24. POSTGRES_STATEMENT_TIMEOUT=180000: 3 minutos para queries complejas

# MONITOREO Y RENDIMIENTO:
# 25. Usa /health/database para monitoreo en tiempo real
# 26. Usa /health/detailed para análisis completo con recomendaciones
# 27. Configura alertas para pool de conexiones agotado
# 28. Monitorea tiempos de respuesta de queries
# 29. Configura alertas para timeouts de conexión
# 30. Implementa métricas de rendimiento de base de datos

# CONFIGURACIÓN DE PRODUCCIÓN:
# 31. DEBUG=false: Deshabilita modo debug en producción
# 32. LOG_LEVEL=info: Nivel de log apropiado para producción
# 33. ENVIRONMENT=production: Identifica el entorno correctamente
# 34. SSL requerido: POSTGRES_SSL_MODE=require
# 35. Certificados SSL válidos: Configura rutas correctas

# OPTIMIZACIONES ESPECÍFICAS PARA AZURE POSTGRESQL:
# 36. TCP Keepalives habilitados para mantener conexiones estables
# 37. Pool size optimizado para latencia de red de Azure
# 38. Timeouts ajustados para operaciones en la nube
# 39. Connection pooling agresivo para minimizar overhead de red
# 40. Reciclaje de conexiones optimizado para Azure

# TROUBLESHOOTING EN PRODUCCIÓN:
# 41. Si hay errores de timeout, aumenta POSTGRES_STATEMENT_TIMEOUT
# 42. Si hay errores de pool agotado, aumenta POSTGRES_POOL_SIZE y MAX_OVERFLOW
# 43. Si hay conexiones lentas, verifica POSTGRES_CONNECT_TIMEOUT
# 44. Si hay queries lentas, optimiza la consulta o aumenta POSTGRES_STATEMENT_TIMEOUT
# 45. Monitorea /health/detailed para recomendaciones automáticas
# 46. Configura alertas para métricas críticas de base de datos
# 47. Implementa escalado automático si es necesario
# 48. Para Azure: Considera usar read replicas para queries de solo lectura
