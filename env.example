# =============================================================================
# CONFIGURACIÓN DE LA APLICACIÓN
# =============================================================================

# Configuración de la aplicación FastAPI
APP_NAME=Rebates Management API
APP_VERSION=0.1.0
DEBUG=true
API_PREFIX=/api/v1
ENVIRONMENT=development
LOG_LEVEL=info

# =============================================================================
# CONFIGURACIÓN DE BASE DE DATOS
# =============================================================================

# Configuración de PostgreSQL
POSTGRES_USER=tu_usuario_aqui
POSTGRES_PASSWORD=tu_contraseña_aqui
POSTGRES_DB=tu_bd_aqui
POSTGRES_HOST=tu_host_aqui
POSTGRES_PORT=5432

# Configuración SSL para PostgreSQL
POSTGRES_SSL_MODE=require
POSTGRES_SSL_CERT=
POSTGRES_SSL_KEY=
POSTGRES_SSL_ROOT_CERT=

# Configuración del pool de conexiones (optimizado para Azure PostgreSQL)
# Número de conexiones permanentes en el pool
POSTGRES_POOL_SIZE=15
# Número máximo de conexiones adicionales cuando el pool está lleno
POSTGRES_MAX_OVERFLOW=25
# Tiempo máximo para obtener una conexión del pool (segundos)
POSTGRES_POOL_TIMEOUT=15
# Tiempo después del cual se recicla una conexión (segundos)
POSTGRES_POOL_RECYCLE=1200

# Configuración de timeouts de conexión (optimizado para Azure)
# Tiempo máximo para establecer conexión inicial (segundos)
POSTGRES_CONNECT_TIMEOUT=10
# Tiempo máximo para ejecutar comandos async (segundos)
POSTGRES_COMMAND_TIMEOUT=60
# Tiempo máximo para ejecutar queries SQL (milisegundos)
POSTGRES_STATEMENT_TIMEOUT=60000

# Configuración adicional de la base de datos
SQL_ECHO=false

# =============================================================================
# CONFIGURACIÓN DE SEGURIDAD
# =============================================================================

# Configuración CORS (separar múltiples orígenes con comas)
# CORS_ORIGINS=https://tu-dominio.com,https://www.tu-dominio.com
CORS_ORIGINS=
CORS_ALLOW_CREDENTIALS=false

# =============================================================================
# CONFIGURACIÓN DE ENTORNO
# =============================================================================

# Configuración de Python
PYTHONPATH=/app

# =============================================================================
# CONFIGURACIÓN DE GOOGLE CLOUD BIGQUERY
# =============================================================================

# Ruta al archivo de credenciales de Google Cloud
GCP_KEY_FILE=./bigquery.key.json

# ID del proyecto de Google Cloud
GCP_PROJECT_ID=btot-cl-prd-webgestiontottus

# =============================================================================
# CONFIGURACIONES ADICIONALES
# =============================================================================


# Configuración de Keycloak
KEYCLOAK_PUB=

# Configuración de Blob Storage
BLOB_STORAGE_CONNECTION=

# =============================================================================
# NOTAS IMPORTANTES
# =============================================================================

# CONFIGURACIÓN GENERAL:
# 1. Todas las variables de configuración ahora son obligatorias
# 2. No hay valores por defecto en config.py
# 3. La aplicación fallará si falta alguna variable en este archivo
# 4. Ajusta los valores según tu entorno de desarrollo
# 5. SSL está habilitado por defecto para mayor seguridad
# 6. CORS está configurado para solo permitir orígenes específicos
# 7. Rate limiting está habilitado para prevenir ataques
# 8. Debug está habilitado por defecto en desarrollo
# 9. Copia este archivo a .env y ajusta los valores reales
# 10. Configura Redis para rate limiting avanzado
# 11. Ajusta los límites de rate limiting según tu carga
# 12. Monitoreo está deshabilitado por defecto en desarrollo
# 13. BigQuery está configurado para usar credenciales de servicio desde archivo JSON
# 14. Asegúrate de que el archivo de credenciales esté en la ruta especificada en GCP_KEY_FILE
# 15. El project_id debe coincidir con tu proyecto de Google Cloud

# OPTIMIZACIÓN DE BASE DE DATOS:
# 16. POSTGRES_POOL_SIZE: Número de conexiones permanentes (recomendado: 5-20)
# 17. POSTGRES_MAX_OVERFLOW: Conexiones adicionales cuando el pool está lleno (recomendado: 10-50)
# 18. POSTGRES_POOL_TIMEOUT: Tiempo máximo para obtener conexión (recomendado: 10-30s)
# 19. POSTGRES_POOL_RECYCLE: Tiempo de reciclaje de conexiones (recomendado: 1800-3600s)
# 20. POSTGRES_CONNECT_TIMEOUT: Tiempo para establecer conexión inicial (recomendado: 5-10s)
# 21. POSTGRES_COMMAND_TIMEOUT: Tiempo para comandos async (recomendado: 30-60s)
# 22. POSTGRES_STATEMENT_TIMEOUT: Tiempo para queries SQL en milisegundos (recomendado: 30000-60000ms)

# RENDIMIENTO Y MONITOREO:
# 23. Usa /health/database para monitorear el estado de la base de datos
# 24. Usa /health/detailed para análisis completo con recomendaciones
# 25. Para mayor rendimiento, aumenta POOL_SIZE y MAX_OVERFLOW
# 26. Para mayor estabilidad, aumenta los timeouts
# 27. Para desarrollo, reduce timeouts para detectar problemas más rápido
# 28. Monitorea el pool de conexiones regularmente para optimizar valores

# CONFIGURACIÓN POR ENTORNO:
# 29. DESARROLLO: Pool pequeño (5-10), timeouts bajos (5-10s)
# 30. TESTING: Pool medio (10-20), timeouts moderados (10-30s)
# 31. PRODUCCIÓN: Pool grande (20-50), timeouts altos (30-60s)
# 32. Azure PostgreSQL: Considera latencia de red en timeouts
# 33. SSL requerido en producción, opcional en desarrollo

# EJEMPLOS DE CONFIGURACIÓN:
# DESARROLLO LOCAL (valores actuales):
# POSTGRES_POOL_SIZE=15, POSTGRES_MAX_OVERFLOW=25, POSTGRES_POOL_TIMEOUT=15
# POSTGRES_CONNECT_TIMEOUT=10, POSTGRES_COMMAND_TIMEOUT=60, POSTGRES_STATEMENT_TIMEOUT=60000

# PRODUCCIÓN ALTA CARGA:
# POSTGRES_POOL_SIZE=25, POSTGRES_MAX_OVERFLOW=50, POSTGRES_POOL_TIMEOUT=30
# POSTGRES_CONNECT_TIMEOUT=15, POSTGRES_COMMAND_TIMEOUT=120, POSTGRES_STATEMENT_TIMEOUT=120000

# PRODUCCIÓN CRÍTICA:
# POSTGRES_POOL_SIZE=40, POSTGRES_MAX_OVERFLOW=80, POSTGRES_POOL_TIMEOUT=60
# POSTGRES_CONNECT_TIMEOUT=20, POSTGRES_COMMAND_TIMEOUT=180, POSTGRES_STATEMENT_TIMEOUT=180000

# TROUBLESHOOTING:
# 34. Si hay errores de timeout, aumenta POSTGRES_STATEMENT_TIMEOUT
# 35. Si hay errores de pool agotado, aumenta POSTGRES_POOL_SIZE y MAX_OVERFLOW
# 36. Si hay conexiones lentas, verifica POSTGRES_CONNECT_TIMEOUT
# 37. Si hay queries lentas, optimiza la consulta o aumenta POSTGRES_STATEMENT_TIMEOUT
# 38. Monitorea /health/detailed para recomendaciones automáticas
